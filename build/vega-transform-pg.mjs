import{inherits as t,ingest as r,Transform as e}from"vega";var n=require("querystring"),o=require("http");function s(t){e.call(this,[],t)}s.setHttpOptions=function(t){return t?(this._httpOptions=t,this):this._httpOptions},s.Definition={type:"postgres",metadata:{changes:!0,source:!0},params:[{name:"query",type:"string",required:!0}]},t(s,e).transform=function(t,e){try{var i=this;if(console.log(t),!s._httpOptions)throw Error("Vega Transform Postgres http options missing. Assign it with setHttpOptions.");if(!t.query)throw Error("Internal error: this._query should be defined");return Promise.resolve(new Promise(function(r,e){var i=n.stringify({query:t.query});s._httpOptions["Content-Length"]=Buffer.byteLength(i);var u=o.request(s._httpOptions,function(t){var n="";t.on("data",function(t){n+=t}),t.on("end",function(){400===t.statusCode?e(t.statusMessage+": "+n):r(JSON.parse(n))})});u.on("error",function(t){e(t)}),u.write(i),u.end()}).catch(function(t){return console.error(t),[]})).then(function(t){t.forEach(r);var n=e.fork(e.NO_FIELDS&e.NO_SOURCE);return i.value=n.add=n.source=n.rem=t,n})}catch(t){return Promise.reject(t)}};export default s;
//# sourceMappingURL=vega-transform-pg.mjs.map
