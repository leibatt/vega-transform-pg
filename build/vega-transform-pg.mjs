import{inherits as r,ingest as t,Transform as e}from"vega";"undefined"!=typeof Symbol&&(Symbol.iterator||(Symbol.iterator=Symbol("Symbol.iterator"))),"undefined"!=typeof Symbol&&(Symbol.asyncIterator||(Symbol.asyncIterator=Symbol("Symbol.asyncIterator")));var o=require("querystring");function n(r){e.call(this,[],r)}require("http"),global.fetch=require("node-fetch"),n.setHttpOptions=function(r){return r?(this._httpOptions=r,this):this._httpOptions},n.Definition={type:"dbtransform",metadata:{changes:!0,source:!0},params:[{name:"query",type:"string",required:!0}]},r(n,e).transform=function(r,e){try{var i=this;function s(){a.forEach(t);var r=e.fork(e.NO_FIELDS&e.NO_SOURCE);return i.value=r.add=r.source=r.rem=a,r}if(!n._httpOptions)throw Error("Vega Transform Postgres http options missing. Assign it with setHttpOptions.");if(!r.query)throw Error("Internal error: this._query should be defined");var a=[],u=function(r,t){try{var e=r()}catch(r){return t(r)}return e&&e.then?e.then(void 0,t):e}(function(){return Promise.resolve(function(){try{var t=n._httpOptions;return Promise.resolve(fetch(t.url,{method:t.method,mode:t.mode,headers:t.headers,body:o.stringify({query:r.query})})).then(function(r){return r.ok?Promise.resolve(r.json()):Promise.resolve(r.json()).then(function(r){throw Error((r.error+": "+r.message).replace(/(\r\n|\n|\r)/gm,""))})})}catch(r){return Promise.reject(r)}}()).then(function(r){a=r})},function(r){console.log(r)});return Promise.resolve(u&&u.then?u.then(s):s())}catch(r){return Promise.reject(r)}};export default n;
//# sourceMappingURL=vega-transform-pg.mjs.map
